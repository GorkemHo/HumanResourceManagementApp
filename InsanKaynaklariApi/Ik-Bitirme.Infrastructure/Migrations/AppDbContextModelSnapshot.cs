// <auto-generated />
using System;
using Ik_Bitirme.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ik_Bitirme.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.AdvanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdvanceRequests");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearOfEstablishment")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Address = "Ankara",
                            ContractEndDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(798),
                            ContractStartDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(798),
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(793),
                            Email = "abc@company.com",
                            MersisNo = "123456789",
                            Name = "abc",
                            PhoneNumber = "123456789",
                            Status = 1,
                            TaxAdministration = "vergiDariresi",
                            TaxNo = "123456789",
                            Title = "ltd",
                            YearOfEstablishment = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(801)
                        },
                        new
                        {
                            CompanyId = 2,
                            Address = "Ankara",
                            ContractEndDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(806),
                            ContractStartDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(805),
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(803),
                            Email = "scd@company.com",
                            MersisNo = "123456789",
                            Name = "scd",
                            PhoneNumber = "123456789",
                            Status = 1,
                            TaxAdministration = "vergiDariresi",
                            TaxNo = "123456789",
                            Title = "ltd",
                            YearOfEstablishment = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(808)
                        },
                        new
                        {
                            CompanyId = 3,
                            Address = "Ankara",
                            ContractEndDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(812),
                            ContractStartDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(811),
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(809),
                            Email = "dxs@company.com",
                            MersisNo = "123456789",
                            Name = "dxs",
                            PhoneNumber = "123456789",
                            Status = 1,
                            TaxAdministration = "vergiDariresi",
                            TaxNo = "123456789",
                            Title = "ltd",
                            YearOfEstablishment = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(813)
                        },
                        new
                        {
                            CompanyId = 4,
                            Address = "İstanbul",
                            ContractEndDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(817),
                            ContractStartDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(816),
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(815),
                            Email = "qwe@company.com",
                            MersisNo = "123456789",
                            Name = "qwe",
                            PhoneNumber = "123456789",
                            Status = 1,
                            TaxAdministration = "vergiDariresi",
                            TaxNo = "123456789",
                            Title = "ltd",
                            YearOfEstablishment = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(819)
                        },
                        new
                        {
                            CompanyId = 5,
                            Address = "İstanbul",
                            ContractEndDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(823),
                            ContractStartDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(822),
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(820),
                            Email = "rxa@company.com",
                            MersisNo = "123456789",
                            Name = "rxa",
                            PhoneNumber = "123456789",
                            Status = 1,
                            TaxAdministration = "vergiDariresi",
                            TaxNo = "123456789",
                            Title = "ltd",
                            YearOfEstablishment = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(825)
                        });
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(707),
                            Name = "Information Technology",
                            Status = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(735),
                            Name = "Human Resources",
                            Status = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(736),
                            Name = "Accounting",
                            Status = 0
                        },
                        new
                        {
                            DepartmentId = 4,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(738),
                            Name = "Marketing",
                            Status = 0
                        },
                        new
                        {
                            DepartmentId = 5,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(739),
                            Name = "Sales",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.ExpenseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ExpenseRequests");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(860),
                            Description = "sagasg",
                            Name = "aasgasgbc",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(863),
                            Description = "asgasg",
                            Name = "sasgasgcd",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(865),
                            Description = "asgasg",
                            Name = "dasgasgxs",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(867),
                            Description = "asgasg",
                            Name = "qasgasgwe",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 486, DateTimeKind.Local).AddTicks(869),
                            Description = "asgsagasg",
                            Name = "rxasgasga",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Employee",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "Director",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "Employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TcIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e25d8510-7770-4001-a2d2-2199bd09d857",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXM+WSXvdwgJer3FV0qdyc0/O9a00xcAamyyTPMmvbgZce6MRs/0YABXx7ROi/A0w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bba1ffc2-40f5-4939-8587-053ad45e438c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            Address = "abc",
                            BirthDate = new DateTime(2024, 4, 29, 13, 6, 7, 469, DateTimeKind.Local).AddTicks(9321),
                            BirthPlace = "aaa",
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 469, DateTimeKind.Local).AddTicks(9304),
                            DepartmentId = 1,
                            FirstName = "admin",
                            HireDate = new DateTime(2024, 4, 29, 13, 6, 7, 469, DateTimeKind.Local).AddTicks(9323),
                            JobId = 1,
                            LastName = "admin",
                            Salary = 123m,
                            Status = 1,
                            TcIdentity = "123123"
                        });
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Ik_Bitirme.Domain.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Director", b =>
                {
                    b.HasBaseType("Ik_Bitirme.Domain.Entities.AppUser");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("Ik_Bitirme.Domain.Entities.AppUser");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6617599b-5395-430a-be30-8ce271bc8e5e",
                            Email = "ahmet@ahmet.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@EXAMPLE.COM",
                            NormalizedUserName = "AHMET",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJtYxAPcb+z1TKd20IUg9LuGhEDBmA9p5Aq7FNSwoornW0QbLtcg9dY9LriNh+/wg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d236b58-2f75-40f9-97ab-668730727b08",
                            TwoFactorEnabled = false,
                            UserName = "ahmet",
                            Address = "abc",
                            BirthDate = new DateTime(2024, 4, 29, 13, 6, 7, 503, DateTimeKind.Local).AddTicks(1088),
                            BirthPlace = "aaa",
                            CreateDate = new DateTime(2024, 4, 29, 13, 6, 7, 503, DateTimeKind.Local).AddTicks(1070),
                            DepartmentId = 1,
                            FirstName = "sagasg",
                            HireDate = new DateTime(2024, 4, 29, 13, 6, 7, 503, DateTimeKind.Local).AddTicks(1090),
                            JobId = 1,
                            LastName = "asgsag",
                            Salary = 123m,
                            Status = 1,
                            TcIdentity = "123123",
                            CompanyId = 1
                        });
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.AdvanceRequest", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Employee", "Employee")
                        .WithMany("Advances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Department", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Company", null)
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.ExpenseRequest", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Employee", "Employee")
                        .WithMany("Expenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Ik_Bitirme.Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.Navigation("Department");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Director", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Company", "Company")
                        .WithMany("Directors")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Ik_Bitirme.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Directors");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Ik_Bitirme.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");

                    b.Navigation("Leaves");
                });
#pragma warning restore 612, 618
        }
    }
}
