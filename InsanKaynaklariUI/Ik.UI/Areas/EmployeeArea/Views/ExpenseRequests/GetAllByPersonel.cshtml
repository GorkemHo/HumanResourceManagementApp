@model IEnumerable<ExpenseRequestVm>

@{
    ViewData["Title"] = "GetAll";
    Layout = "_EmployeeLayout";
}

@{
    ViewData["Title"] = "Index";
    Pager pager = new Pager();
    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
}



<h1 class="mt-5">My Expenses</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create Expense Request</a>
</p>

<div class="mb-3">
    <input type="text" id="searchInput" class="form-control" placeholder="Search by Type">
</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered" id="advanceTable">
        <thead class="thead-dark">
            <tr>
                @*<th>
                <a href="#" class="sort text-decoration-none text-primary" data-sort="employeeID">
                Employee ID
                </a>
                </th>*@
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="expenseType">
                        Expense Type
                    </a>
                </th>
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="amount">
                        Amount
                    </a>
                </th>
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="currency">
                        Currency
                    </a>
                </th>
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="responseDate">
                        Response Date
                    </a>
                </th>
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="approvalStatus">
                        Approval Status
                    </a>
                </th>
                <th>
                    <a href="#" class="sort text-decoration-none text-primary" data-sort="requestDate">
                        Request Date
                    </a>
                </th>
                @*<th>
                <a href="#" class="sort text-decoration-none text-primary" data-sort="createDate">
                Create Date
                </a>
                </th>*@
                @*<th>
                <a href="#" class="sort text-decoration-none text-primary" data-sort="updateDate">
                Update Date
                </a>
                </th>
                <th>
                <a href="#" class="sort text-decoration-none text-primary" data-sort="status">
                Status
                </a>
                </th>*@
                <th>Buttons</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @*<td>
                @Html.DisplayFor(modelItem => item.EmployeeId)
                </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.ExpenseType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Amount)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Currency)
                    </td>

                    @if (item.ResponseDate != null)
                    {

                        <td>@item.RequestDate.ToShortDateString()</td>
                    }
                    else
                    {
                        <td>Your request has not been responded to yet.</td>
                    }

                    <td>
                        @Html.DisplayFor(modelItem => item.ApprovalStatus)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RequestDate)
                    </td>
                    <td>
                        @if (item.ApprovalStatus == ApprovalStatus.Pending)
                        {
                            <a asp-action="Edit" asp-route-id="@item.EncryptedId" class="btn btn-primary mr-2">Edit</a>
                        }
                        else
                        { }

                        <a asp-action="GetExpenseRequestById" asp-route-id="@item.EncryptedId" class="btn btn-info mr-2">Details</a>

                        <form id="deleteForm-@item.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this item?');" style="display: inline;">
                            <button type="button" class="btn btn-danger" onclick="deleteExpense('@item.EncryptedId')">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="container">
    @if (pager.TotalPages > 0)
    {
        <ul class="pagination justify-content-end">
            @if (pager.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="GetAllByPersonel" asp-route-page="1">First</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="GetAllByPersonel" asp-route-page="(@pager.CurrentPage-1)">Previous</a>
                </li>
            }
            @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
            {
                <li class="page-item @(pge == pager.CurrentPage ? "active": "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@pge">@pge</a>
                </li>
            }
            @if (pager.CurrentPage < pager.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="GetAllByPersonel" asp-route-page="(@pager.CurrentPage+1)">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-action="GetAllByPersonel" asp-route-page="@pager.TotalPages">Last</a>
                </li>
            }
        </ul>
    }
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            $('#searchInput').on('keyup', function () {
                var value = $(this).val().toLowerCase();
                $('#advanceTable tbody tr').filter(function () {
                    $(this).toggle($(this).find('td:nth-child(1)').text().toLowerCase().indexOf(value) > -1)
                });
            });

            $('.sort').on('click', function () {
                var $table = $('#advanceTable');
                var $rows = $table.find('tbody > tr').toArray().sort(comparer($(this).index()));
                this.asc = !this.asc;
                if (!this.asc) {
                    $rows = $rows.reverse();
                }
                $table.children('tbody').empty().append($rows);
            });


            // Comparison function for sorting
            function comparer(index) {
                return function (a, b) {
                    var valA = getCellValue(a, index), valB = getCellValue(b, index)
                    return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.toString().localeCompare(valB)
                }
            }

            // Function to get cell value
            function getCellValue(row, index) {
                return $(row).children('td').eq(index).text()
            }

        });
    </script>
}